apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
android {
    compileSdkVersion 23
    buildToolsVersion '23.0.3'
    defaultConfig {
        resConfigs "zh"
        applicationId "com.dw.applebuy"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.1.2"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

//        极光推送

        ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi', 'armeabi-v7a', 'armeabi-v8a', 'x86', "x86_64", "mips", "mips64"
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }

        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "bd9ba37416679ee0f68835a6", //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]

    }

    signingConfigs {
        signConfig {
            storeFile file('keyStore.jks')//签名文件路径，
            //keystore的路径通常使用项目根目录的相对路径，但也可以是使用绝对路径，尽管这不推荐
            storePassword 'apple411' //密码
            keyAlias '苹果'
            keyPassword 'apple411'  //密码
        }
    }

    buildTypes {
        release {

            // 如果没有提供混淆规则文件，则设置默认的混淆规则文件（SDK/tools/proguard/proguard-android.txt）
            pseudoLocalesEnabled true
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //混淆
            minifyEnabled true
            useProguard true
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.signConfig // 配置debug包的签名

            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {

                        // apk_渠道名-版本号-版本名称-编译时间.apk
                        def fileName = "apk_${variant.productFlavors[0].name}-${defaultConfig.versionCode}-${defaultConfig.versionName}-${releaseTime()}.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }

        debug {
            // 如果没有提供混淆规则文件，则设置默认的混淆规则文件（SDK/tools/proguard/proguard-android.txt）
            pseudoLocalesEnabled true
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            //混淆
            minifyEnabled false
            useProguard false
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.signConfig // 配置debug包的签名
        }
    }
    productFlavors {
//        qihu360 {} // 360手机助手
          yingyongbao {} // 腾讯应用宝
//        wandoujia {} // 豌豆荚
//        baidu {} // 百度手机助手
//        miui {} // 小米
//        flyme {} // 魅族
//        lenovo {} // 联想-乐商店
//        oppo {} // Oppo-可可软件商店
//        huawei {} // 华为
//        vivo {} // vivo
//        hiapk {} // 安卓市场
//        sj91 {} // 91手机助手
//        sogou {} // 搜狗手机市场
//        sohu {} // 搜狐应用中心
//        taobao {} // 淘宝手机助手
//        gfan {} // 机锋
//        appchina {} // 应用汇
//        mumayi {} // 木蚂蚁
//        wangyi163 {} // 网易应用
//        nduoa {} // N多市场
//        mm10086 {} // MM商城-中国移动
//        wostore {} // WO商店
//        youyi {} // 优异
//        uc {} // UC+开发平台
//        anzhi {} // 安智市场
//        google {} // google play
//        amazon {} // 亚马逊
    }

    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }
}

def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile project(':base')
    compile project(':third')
    compile project(path: ':photopicker')
    compile('com.android.support:support-v4:23.4.0') {
        force = true;
    }
    compile('com.android.support:recyclerview-v7:23.4.0') {
        exclude module: 'support-v4'
    }
    //    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    //    compile 'io.reactivex.rxjava2:rxjava:2.0.4'
    //    /*rotrofit*/
    //    compile 'com.squareup.retrofit2:retrofit:+'// Retrofit 网络支持
    //    compile 'com.squareup.retrofit2:converter-gson:+'// Gson 适配器
    //    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:+'// 大神写的这个库可以支持到rxjava2.X
    //    compile 'com.squareup.retrofit2:adapter-rxjava:+'//retrofit现在只支持到rxjava1.XX 会报错：DuplicateFileException: Duplicate files copied in APK META-INF/rxjava.properties
    compile files('libs/BaiduLBS_Android.jar')
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:design:23.4.0'
    compile 'com.jakewharton:butterknife:8.4.0'
    compile 'com.android.support:support-v4:23.4.0'
    apt 'com.jakewharton:butterknife-compiler:8.4.0'
    //漂亮的对话框
    //    compile 'cn.pedant.sweetalert:library:1.3'
    compile project(path: ':qR_CodeScan')
    compile 'cn.jiguang.sdk:jpush:3.0.1'
    // 此处以JPush 3.0.0 版本为例。
    compile 'cn.jiguang.sdk:jcore:1.1.0'
    // 此处以JCore 1.0.0 版本为例。
}
